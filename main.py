from eth_utils import to_checksum_address
from config.configvalidator import ConfigValidator
from client.client import Client
from utils.logger import logger
import asyncio
import json
import sys

# Load ABI files
try:
    with open("abi/core_abi.json", "r", encoding="utf-8") as f:
        CORE_ABI = json.load(f)

    with open("abi/erc20_abi.json", "r", encoding="utf-8") as f:
        ERC20_ABI = json.load(f)
except FileNotFoundError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ABI —Ñ–∞–π–ª–æ–≤: {e}")
    sys.exit(1)
except json.JSONDecodeError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ABI —Ñ–∞–π–ª–æ–≤: {e}")
    sys.exit(1)


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...\n")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
        validator = ConfigValidator("config/settings.json")
        settings = await validator.validate_config()

        try:
            with open("constants/networks_data.json", "r", encoding="utf-8") as file:
                networks_data = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π: {e}")
            sys.exit(1)

        if settings["network"] not in networks_data:
            logger.error(f"–°–µ—Ç—å {settings['network']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π")
            sys.exit(1)

        network = networks_data[settings["network"]]

        client = Client(
            proxy=settings["proxy"],
            rpc_url=network["rpc_url"],
            chain_id=network["chain_id"],
            amount=float(settings["amount"]),
            private_key=settings["private_key"],
            explorer_url=network["explorer_url"],
            usdc_address=to_checksum_address(network["usdc_address"]),
            core_address=to_checksum_address(network["core_address"]),
            ltoken_address=to_checksum_address(network["ltoken_address"])
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        amount_in = await client.to_wei_main(client.amount, client.usdc_address)
        erc20_balance = await client.get_erc20_balance()
        native_balance = await client.get_native_balance()
        gas = await client.get_tx_fee()
        
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: {await client.from_wei_main(erc20_balance, client.usdc_address):.6f}")
        logger.info(f"‚õΩ –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞: {await client.from_wei_main(gas):.8f}\n")
        
        if amount_in > erc20_balance:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ USDC! –¢—Ä–µ–±—É–µ—Ç—Å—è: {await client.from_wei_main(amount_in, client.usdc_address):.6f}"
                         f" —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: {await client.from_wei_main(erc20_balance, client.usdc_address):.6f}\n")
            sys.exit(1)
        if native_balance < gas:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è: {await client.from_wei_main(gas):.8f}"
                         f" —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: {await client.from_wei_main(native_balance):.8f}\n")
            sys.exit(1)

        # –ê–ø–ø—Ä—É–≤ —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
        usdc_contract = await client.get_contract(to_checksum_address(client.usdc_address), abi=ERC20_ABI)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π allowance
        current_allowance = await client.get_allowance(client.usdc_address, client.address, client.ltoken_address)
        if current_allowance < amount_in:
            logger.info(f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–ø–ø—Ä—É–≤ USDC –Ω–∞ —Å—É–º–º—É {await client.from_wei_main(amount_in, client.usdc_address):.6f}\n")
            await client.approve_usdc(usdc_contract, client.ltoken_address, amount_in)
        else:
            logger.info(f"‚úÖ –ê–ø–ø—Ä—É–≤ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –∞–ø–ø—Ä—É–≤–∞\n")

        core = await client.get_contract(to_checksum_address(client.core_address), abi=CORE_ABI)

        logger.info("‚öôÔ∏è –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...\n")
        try:
            tx = await core.functions.supply(client.ltoken_address, amount_in).build_transaction(
                await client.prepare_tx())

            tx_hash = await client.sign_and_send_tx(tx)
            logger.info(f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}\n")

            success = await client.wait_tx(tx_hash, client.explorer_url)
            if success:
                logger.info(f"‚úÖ USDC —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ LayerBank! –°—É–º–º–∞: {await client.from_wei_main(amount_in, client.usdc_address):.6f}\n")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å lToken
                try:
                    ltoken_contract = await client.get_contract(client.ltoken_address, ERC20_ABI)
                    ltoken_balance = await ltoken_contract.functions.balanceOf(client.address).call()
                    logger.info(f"üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å lUSDC: {await client.from_wei_main(ltoken_balance, client.ltoken_address):.6f}\n")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å lUSDC: {e}\n")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å USDC –Ω–∞ LayerBank\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ USDC: {e}\n")
            sys.exit(1)

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
