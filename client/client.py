from functools import wraps
from aiohttp import ClientHttpProxyError
from eth_account import Account
from web3.middleware.geth_poa import async_geth_poa_middleware
from web3.exceptions import TransactionNotFound
from web3 import AsyncWeb3, AsyncHTTPProvider
from web3.contract import AsyncContract
from typing import Optional, Union
from web3.types import TxParams
from hexbytes import HexBytes
from client.networks import Network
import asyncio
import logging
import json

with open("abi/erc20_abi.json", "r", encoding="utf-8") as file:
    ERC20_ABI = json.load(file)

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)


def retry_on_proxy_error(max_attempts: int = 3, fallback_no_proxy: bool = True):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–∫—Å–∏."""

    def decorator(func):
        @wraps(func)
        async def wrapper(self, *args, **kwargs):
            attempts = 0
            last_error = None
            while attempts < max_attempts:
                try:
                    return await func(self, *args, **kwargs)
                except ClientHttpProxyError as e:
                    attempts += 1
                    last_error = e
                    logger.warning(f"üßπ –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempts}/{max_attempts}): {e}")
                    if attempts == max_attempts and fallback_no_proxy:
                        logger.info("–û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏")
                        self._disable_proxy()
                        try:
                            return await func(self, *args, **kwargs)
                        except ClientHttpProxyError as e:
                            last_error = e
                    await asyncio.sleep(1)
            raise ValueError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {last_error}")

        return wrapper

    return decorator


class Client:
    def __init__(self, ltoken_address: str, core_address: str, chain_id: int, rpc_url: str, private_key: str,
                 amount: float, explorer_url: str, usdc_address: str, proxy: Optional[str] = None):
        request_kwargs = {"proxy": f"http://{proxy}"} if proxy else {}
        self.ltoken_address = ltoken_address
        self.explorer_url = explorer_url
        self.private_key = private_key
        self.account = Account.from_key(self.private_key)
        self.core_address = core_address
        self.usdc_address = usdc_address
        self.chain_id = chain_id
        self.amount = amount
        self.rpc_url = rpc_url
        self.proxy = proxy

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å
        if isinstance(chain_id, str):
            self.network = Network.from_name(chain_id)
        else:
            self.network = Network.from_chain_id(chain_id)

        self.chain_id = self.network.chain_id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncWeb3
        self.w3 = AsyncWeb3(AsyncHTTPProvider(rpc_url, request_kwargs=request_kwargs))
        # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è PoA-—Å–µ—Ç–µ–π
        if self.network.is_poa:
            self.w3.middleware_onion.clear()
            self.w3.middleware_onion.inject(async_geth_poa_middleware, layer=0)

        self.eip_1559 = True
        self.address = self.w3.to_checksum_address(
            self.w3.eth.account.from_key(self.private_key).address)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    async def get_native_balance(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ ETH/BNB/MATIC –∏ —Ç.–¥."""
        balance_wei = await self.w3.eth.get_balance(self.address)
        return balance_wei

    async def get_allowance(self, token_address: str, owner: str, spender: str) -> int:
        try:
            contract = await self.get_contract(token_address, ERC20_ABI)
            allowance = await contract.functions.allowance(
                self.w3.to_checksum_address(owner),
                self.w3.to_checksum_address(spender)
            ).call()
            return allowance
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ allowance: {e}")
            return 0

    # –í—Ä–∞–ø –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    async def wrap_native(self, token_address: str, amount_wei: int = None) -> str:
        """
        –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω (ETH/BNB/MATIC) –≤ WETH/WBNB/WMATIC.
        """
        from utils.wrappers import wrap_native_token
        if amount_wei is None:
            amount_wei = self.to_wei_main(self.amount, token_address)

        tx = await wrap_native_token(self.w3, self.network.name, amount_wei, self.address)
        signed = self.w3.eth.account.sign_transaction(tx, self.private_key)
        tx_hash = await self.w3.eth.send_raw_transaction(signed.raw_transaction)
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω wrap-—Çx: {tx_hash.hex()}\n")
        return tx_hash.hex()

    # –ê–Ω–≤—Ä–∞–ø –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    async def unwrap_native(self, amount_wei: int) -> str:
        """
        –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç WETH/WBNB/... –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω.
        """
        from utils.wrappers import unwrap_native_token
        tx = await unwrap_native_token(self.w3, self.network.name, amount_wei, self.address)
        signed = self.w3.eth.account.sign_transaction(tx, self.private_key)
        tx_hash = await self.w3.eth.send_raw_transaction(signed.raw_transaction)
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω unwrap-—Çx: {tx_hash.hex()}\n")
        return tx_hash.hex()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ERC20
    async def get_erc20_balance(self) -> float | int:

        contract = self.w3.eth.contract(
            address=self.w3.to_checksum_address(self.usdc_address), abi=ERC20_ABI)
        try:
            balance = await contract.functions.balanceOf(self.address).call()
            return balance
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ ERC20: {e}")
            return 0

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–º—É
    async def get_contract(self, contract_address: str, abi: list) -> AsyncContract:
        return self.w3.eth.contract(
            address=self.w3.to_checksum_address(contract_address), abi=abi
        )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –≥–∞–∑–∞ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    async def get_tx_fee(self) -> int:
        try:
            fee_history = await self.w3.eth.fee_history(10, "latest", [50])
            base_fee = fee_history['baseFeePerGas'][-1]
            max_priority_fee = await self.w3.eth.max_priority_fee
            estimated_gas = 70_000
            max_fee_per_gas = (base_fee + max_priority_fee) * estimated_gas

            return max_fee_per_gas
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
            fallback_gas_price = await self.w3.eth.gas_price
            return fallback_gas_price * 70_000

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –≤–µ–∏
    async def to_wei_main(self, number: int | float, token_address: Optional[str] = None):
        if token_address:
            contract = await self.get_contract(token_address, ERC20_ABI)
            decimals = await contract.functions.decimals().call()
        else:
            decimals = 18

        unit_name = {
            6: "mwei",
            9: "gwei",
            18: "ether"
        }.get(decimals)

        if not unit_name:
            raise RuntimeError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–º—è —é–Ω–∏—Ç–∞ —Å –¥–µ—Ü–∏–º–∞–ª–∞–º–∏: {decimals}")
        return self.w3.to_wei(number, unit_name)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –≤–µ–∏
    async def from_wei_main(self, number: int | float, token_address: Optional[str] = None):
        if token_address:
            contract = await self.get_contract(token_address, ERC20_ABI)
            decimals = await contract.functions.decimals().call()
        else:
            decimals = 18

        unit_name = {
            6: "mwei",
            9: "gwei",
            18: "ether"
        }.get(decimals)

        if not unit_name:
            raise RuntimeError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–º—è —é–Ω–∏—Ç–∞ —Å –¥–µ—Ü–∏–º–∞–ª–∞–º–∏: {decimals}")
        return self.w3.from_wei(number, unit_name)

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async def prepare_tx(self, value: Union[int, float] = 0) -> TxParams:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
        try:
            nonce = await self.w3.eth.get_transaction_count(self.address)
            chain_id = await self.w3.eth.chain_id
            
            tx_params = {
                'from': self.address,
                'nonce': nonce,
                'chainId': chain_id,
            }
            
            if value > 0:
                tx_params['value'] = value
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã EIP-1559 –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if self.eip_1559:
                base_fee = await self.w3.eth.gas_price
                max_priority_fee = int(base_fee * 0.1) or 1_000_000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞–µ–≤–∞—è
                max_fee = int(base_fee * 1.5 + max_priority_fee)
                
                tx_params.update({
                    'maxFeePerGas': max_fee,
                    'maxPriorityFeePerGas': max_priority_fee
                })
            else:
                tx_params['gasPrice'] = await self.w3.eth.gas_price
                
            return tx_params
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async def sign_and_send_tx(self, transaction: TxParams, without_gas: bool = False) -> str:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
        try:
            if not without_gas:
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≥–∞–∑, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if 'gas' not in transaction:
                    try:
                        tx_copy = dict(transaction)
                        del tx_copy['gasPrice']  # –£–¥–∞–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å estimateGas
                        gas_estimate = await self.w3.eth.estimate_gas(tx_copy)
                        transaction['gas'] = int(gas_estimate * 1.2)  # –î–æ–±–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –≥–∞–∑: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                        transaction['gas'] = 300000  # –§–æ–ª–±–µ–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–∞–∑
            
            signed_tx = self.w3.eth.account.sign_transaction(transaction, self.private_key)
            tx_hash = await self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            return tx_hash.hex()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async def wait_tx(self, tx_hash: Union[str, HexBytes], explorer_url: Optional[str] = None) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞.
        """
        if isinstance(tx_hash, str):
            tx_hash = HexBytes(tx_hash)
        
        if explorer_url and not explorer_url.endswith('/'):
            explorer_url += '/'
        
        tx_url = f"{explorer_url}tx/{tx_hash.hex()}" if explorer_url else f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash.hex()}"
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_url}\n")
        
        max_attempts = 50
        for attempt in range(max_attempts):
            try:
                receipt = await self.w3.eth.get_transaction_receipt(tx_hash)
                if receipt is not None:
                    if receipt['status'] == 1:
                        logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–ª–æ–∫: {receipt['blockNumber']}\n")
                        return True
                    else:
                        logger.error(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {tx_url}\n")
                        return False
            except TransactionNotFound:
                pass  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –±–ª–æ–∫
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            
            await asyncio.sleep(5)
        
        logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_url}\n")
        return False

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ approve-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async def approve_usdc(self, usdc_contract, spender, amount):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞–ø–ø—Ä—É–≤–∞ —Ç–æ–∫–µ–Ω–∞."""
        try:
            logger.info(f"üîë –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–ø–ø—Ä—É–≤–∞ USDC –Ω–∞ —Å—É–º–º—É {await self.from_wei_main(amount, self.usdc_address):.6f}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_params = await self.prepare_tx()
            tx = await usdc_contract.functions.approve(spender, amount).build_transaction(tx_params)
            
            # –ü–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
            tx_hash = await self.sign_and_send_tx(tx)
            logger.info(f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–ø–ø—Ä—É–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash}")
            
            success = await self.wait_tx(tx_hash, self.explorer_url)
            if success:
                logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–ø–ø—Ä—É–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ø–ø—Ä—É–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                try:
                    new_allowance = await self.get_allowance(self.usdc_address, self.address, spender)
                    if new_allowance >= amount:
                        logger.info(f"‚úÖ –ê–ø–ø—Ä—É–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ: {await self.from_wei_main(new_allowance, self.usdc_address):.6f}\n")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –ê–ø–ø—Ä—É–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ allowance –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ: {await self.from_wei_main(new_allowance, self.usdc_address):.6f} < {await self.from_wei_main(amount, self.usdc_address):.6f}\n")
                        return False
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π allowance: {e}\n")
                    return True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–ø–ø—Ä—É–≤ USDC\n")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–ø–ø—Ä—É–≤–∞: {e}")
            raise

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async def build_swap_tx(self, quote_data: dict) -> TxParams:
        """
        –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ç–∏—Ä–æ–≤–∫—É.
        """
        raise NotImplementedError("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ")
